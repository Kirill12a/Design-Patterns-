import UIKit


/*
 Factory Method
 –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî —ç—Ç–æ –ø–æ—Ä–æ–∂–¥–∞—é—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

 –§–∞–±—Ä–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–º–µ–Ω—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤, –∞–±—Å—Ç—Ä–∞–≥–∏—Ä—É—è –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã —Ç–∏–ø —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.

 –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: –ü–∞—Ç—Ç–µ—Ä–Ω –º–æ–∂–Ω–æ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–∏–±–∫–æ—Å—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
 */
protocol CurrencyDescribing
{
  var symbol: String { get }
  var code: String { get }
}


class Euro: CurrencyDescribing
{
  var symbol: String
  {
    return "üí∂"
  }

  var code: String
  {
    return "EUR"
  }
}

class USADollar: CurrencyDescribing
{
  var symbol: String
  {
    return "üíµ"
  }

  var code: String
  {
    return "USD"
  }
}

enum Country
{
  case USA
  case Spain
  case UK
}

enum CurrencyFactory
{
  static func currency(coutry: Country) -> CurrencyDescribing?
  {
    switch coutry {
    case .Spain:
      return Euro()
    case .USA:
      return USADollar()
    default:
      return nil
    }
  }
}


let message = "–∫–æ–¥–∞ –≤–∞–ª—é—Ç—ã –Ω–µ—Ç"

CurrencyFactory.currency(coutry: .USA)!.symbol
CurrencyFactory.currency(coutry: .UK)?.code ?? message
CurrencyFactory.currency(coutry: .Spain)?.symbol ?? message












/*
 !!observer
 –®–∞–±–ª–æ–Ω –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç –º–æ–≥ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –î—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

 –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–∞–º —Å–ª–µ–¥–∏—Ç—å –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–µ –≤ –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö.
 */

protocol PropertyObserver: class
{
  func willChange(propertyName: String, newPropertyValue: Any?)
  func didChange(propertyName: String, oldPropertyValue: Any?)
}

class TestChambers
{
  weak var observer: PropertyObserver?

  private let testChamberNumberName = "testChamberNumber"

  var testChamberNumber: Int = 0 {
    willSet(newValue){
      observer?.willChange(propertyName: testChamberNumberName, newPropertyValue: newValue)
    }

    didSet{
      observer?.didChange(propertyName: testChamberNumberName, oldPropertyValue: oldValue)
    }
  }

}


class Observer: PropertyObserver
{
  func willChange(propertyName: String, newPropertyValue: Any?) {
    if newPropertyValue as! Int == 1 {
      print("–•–æ—Ä–æ—à–æ. –°–º–æ—Ç—Ä–∏. –ú—ã –æ–±–∞ –Ω–∞–≥–æ–≤–æ—Ä–∏–ª–∏ –º–Ω–æ–≥–æ —Ç–∞–∫–æ–≥–æ, –æ —á–µ–º —Ç—ã –ø–æ–∂–∞–ª–µ–µ—à—å.")
    }

  }

  func didChange(propertyName: String, oldPropertyValue: Any?) {
    if oldPropertyValue as! Int == 0 {
      print("–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –±–µ—Å–ø–æ—Ä—è–¥–æ–∫. –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—É—Å—Ç–∏–ª —ç—Ç–æ –º–µ—Å—Ç–æ —Å —Ç–µ—Ö –ø–æ—Ä, –∫–∞–∫ —Ç—ã —É–±–∏–ª –º–µ–Ω—è.")
    }
  }


}


var observerInstance = Observer() // —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
var testChambers = TestChambers()
testChambers.observer = observerInstance
testChambers.testChamberNumber += 1



/*
 !!Template Method

 –®–∞–±–ª–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ ‚Äî —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–µ–ª–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞, –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ —à–∞–≥–∏ –Ω–∞ –ø–æ–¥–∫–ª–∞—Å—Å—ã. –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª–∞—Å—Å–∞–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —à–∞–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞, –Ω–µ –º–µ–Ω—è—è –µ–≥–æ –æ–±—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.

 –®–∞–±–ª–æ–Ω —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç—Ç–∞–ø—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ —ç—Ç–∏—Ö —à–∞–≥–æ–≤. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —à–∞–±–ª–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞—â–∏—â–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º, –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏.
 */


protocol Garden{
  func prepareSoli()
  func plantSeeds()
  func waterPlants()
  func prepareGarden()
}

extension Garden {
  func prepareGarden(){
    prepareSoli()
    plantSeeds()
    waterPlants()
  }
}

var apple = UIView()

class RoseGarden: Garden
{

  func prepare(){
    prepareGarden()
  }

  func prepareSoli() {
    print("–ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø–æ—á–≤—É –¥–ª—è —Ä–æ–∑–∞—Ä–∏—è")
  }

  func plantSeeds() {
    print ("—Å–µ–º–µ–Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –¥–ª—è —Ä–æ–∑–∞—Ä–∏—è")

  }
  func waterPlants() {
    print("–ø–æ–ª–∏–≤–∞–π—Ç–µ —Ä–æ–∑–æ–≤—ã–π —Å–∞–¥")
  }

}


let roseGarden = RoseGarden()
roseGarden.prepare()


